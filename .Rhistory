if (!identical(group.test,FALSE) & group.long == TRUE) {
warning('group.test is incompatible with group.long == TRUE and will be ignored.')
}
if (!is.logical(factor.numeric) | !is.logical(logical.numeric)) {
stop("factor.numeric and logical.numeric must each be TRUE or FALSE")
}
if (is.logical(group.long)) {
group.long.align <- 'c'
} else if (is.character(group.long)) {
if (group.long %in% c('l','r','c')) {
group.long.align <- group.long
group.long <- TRUE
} else {
stop('group.long must be TRUE, FALSE, or a character l, c, or r.')
}
} else {
stop('group.long must be TRUE, FALSE, or a character l, c, or r.')
}
if (!is.logical(fixed.digits)) {
stop('fixed.digits must be TRUE or FALSE.')
}
if (!is.numeric(col.breaks) & !identical(col.breaks,NA)) {
stop('col.breaks must be numeric.')
}
if (!is.na(group) & !identical(col.breaks,NA) & group.long == FALSE) {
stop('group cannot be combined with col.breaks unless group.long = TRUE.')
}
if (!is.numeric(digits) & !is.list(digits) & !identical(digits,NA)) {
stop('digits must be numeric.')
}
if (!is.logical(factor.percent) | !is.logical(factor.counts)) {
stop('factor.percent and factor.counts must each be TRUE or FALSE.')
}
if (!is.character(title)) {
stop('title must be a character variable.')
}
if (identical(out, 'csv') & is.na(file)) {
warning('out = "csv" will just return the vtable as a data.frame unless combined with file')
}
# Weights
wts <- NULL
if (length(group.weights) > 1) {
wts <- group.weights
}
if (length(group.weights) == 1) {
if (is.character(group.weights)) {
wts <- data[[group.weights]]
data[[group.weights]] <- NULL
}
}
if (!identical(group.weights, NA) & is.null(wts)) {
stop('group.weights must be a vector of length nrow(data), or the name of a column in data')
}
if (!is.numeric(wts) & !is.null(wts)) {
stop('group.weights must be numeric.')
}
if ((length(wts) != nrow(data)) & !is.null(wts)) {
stop('group.weights must be the same length as the number of rows in data')
}
if (!is.null(wts)) {
if (min(wts, na.rm = TRUE) < 0) {
stop('No negative weights allowed in group.weights')
}
}
if (!is.null(wts)) {
# Drop missing values
havewts <- !is.na(wts)
wts <- wts[havewts]
data <- subset(data, havewts)
}
#One-column matrices run into some problems later on
if (is.matrix(data) & dim(data)[2] == 1) {
data <- as.data.frame(data)
}
#######CONVERT ALL LABELED NUMERIC VARIABLES AND LOW-NUNIQ CHARACTERS TO FACTORS
#Get classes of each variable, only caring about numeric/character/factor/logical/other
var.classes <- sapply(data, function(x) ifelse(
is.factor(x), 'factor', ifelse(
is.logical(x), 'logical', ifelse(
is.character(x), 'character', ifelse(
is.numeric(x), 'numeric', 'other')))))
labwarning <- FALSE
for (c in 1:ncol(data)) {
#Factorize each character variable with six or fewer unique values
if (var.classes[c] == 'character') {
if (vtable::nuniq(data[[c]]) <= 6) {
data[[c]] <- as.factor(data[[c]])
}
} else if (var.classes[c] == 'logical') {
#Turn logicals to numerics if logical.numeric = FALSE
if (logical.numeric) {
data[[c]] <- as.numeric(data[[c]])
} else {
# Otherwise make them factors
data[[c]] <- factor(data[[c]], levels = c(FALSE,TRUE), labels = logical.labels)
}
} else if (var.classes[c] == 'numeric') {
# If a numeric variable has value labels, turn this into a factor
if ('labelled' %in% class(data[[c]]) | ('haven_labelled' %in% class(data[[c]]) | !is.null(unlist(sjlabelled::get_labels(data[[c]]))))) {
#DON'T include variables with unlabelled values
unlabvals <-  length(sjlabelled::get_labels(data[[c]])) == length(sjlabelled::get_labels(data[[c]], non.labelled = TRUE))
if (!unlabvals) {
data[[c]] <- as.numeric(data[[c]])
labwarning <- TRUE
} else {
#Turn into the appropriately-titled factor
suppressWarnings(data[[c]] <- sjlabelled::as_label(data[,c,drop=FALSE]))
}
}
}
}
if (labwarning) {
warning('Some labelled variables have unlabeled values. Treating these as numeric variables and ignoring labels.')
}
#Re-get classes of each variable, only caring about numeric/character/factor/logical
var.classes <- sapply(data, function(x) ifelse(
is.factor(x), 'factor', ifelse(
is.logical(x), 'logical', ifelse(
is.character(x), 'character', ifelse(
is.numeric(x), 'numeric', 'other')))))
#Do we have factor and also a potentially-non-compliant summ?
factor.warning <- FALSE
if (any(var.classes == 'factor') & !identical(summ,NA) & !factor.numeric) {
if (is.list(summ) & !identical(col.breaks,NA)) {
ext.col.breaks <- c(1,col.breaks,ncol(data))
for (i in 1:length(summ)) {
if ((!(summ[[i]][1] %in% c('length(x)','notNA(x)')) |
!(summ[[i]][2] %in% 'mean(x)')) &
any(var.classes[ext.col.breaks[i]:ext.col.breaks[i+1]] == 'factor')) {
factor.warning <- TRUE
}
}
} else if (!is.list(summ)) {
if (!(summ[1] %in% c('length(x)','notNA(x)')) |
!(summ[2] %in% 'mean(x)')) {
factor.warning <- TRUE
}
} else {
if (!(summ[[1]][1] %in% c('length(x)','notNA(x)')) |
!(summ[[1]][2] %in% 'mean(x)')) {
factor.warning <- TRUE
}
}
}
if (factor.warning) {
warning('Factor variables ignore custom summ options. Cols 1 and 2 are count and percentage.\nBeware combining factors with a custom summ unless factor.numeric = TRUE.')
}
#######DEFAULTS
if (identical(vars,NA)) {
#By default, include numeric and factor vars (includable logicals and characters already converted)
colkeeps <- sapply(1:ncol(data), function(x) ifelse(
is.factor(data[[x]]) | is.numeric(data[[x]]), x, 0))
if (sum(colkeeps > 0) == 0) {
stop('It doesn\'t look like you have any variables that belong in a sumtable. Check your data. Use vars to explicitly choose variables, or convert things to numeric or factor before sending to sumtable.')
}
vars <- names(data)[colkeeps[colkeeps > 0]]
#But not whatever is being used for group!
if (!is.na(group)) {
vars <- vars[vars != group]
}
var.classes <- sapply(as.data.frame(data[,vars]), function(x) ifelse(
is.factor(x), 'factor', 'numeric'))
} else {
#Note that if vars is explicitly defined it might contain non-variables
var.classes <- sapply(vars, function(x) ifelse(
!(x %in% names(data)), 'header', ifelse(
is.factor(data[[x]]), 'factor', ifelse(
is.logical(data[[x]]), 'logical', ifelse(
is.character(data[[x]]), 'character', ifelse(
is.numeric(data[[x]]), 'numeric', 'other'))))))
}
if (identical(col.breaks,NA)) {
col.breaks <- length(vars)
}
if (utils::tail(col.breaks,1) < length(vars)) {
col.breaks[length(col.breaks) + 1] <- length(vars)
}
#Get a list of the variables that each column covers
col.windows <- c(0,col.breaks)
col.vars <- lapply(1:length(col.breaks), function(x) (col.windows[x]+1):col.breaks[x])
#Summary function defaults, and fill in summ.names as well
#Are we filling summ.names at the same time?
fill.sn <- identical(summ.names,NA)
if (identical(summ,NA)) {
summ <- list()
if (fill.sn) {
summ.names <- list()
}
for (i in 1:length(col.vars)) {
if (all(var.classes[col.vars[[i]]] == 'factor')) {
summ[[i]] <- c('sum(x)','mean(x)')
if (fill.sn & factor.percent) {
summ.names[[i]] <- c('N','Percent')
} else {
summ.names[[i]] <- c('N','Mean')
}
# If there are weights
if (!is.null(wts)) {
summ[[i]] <- c('sum(x)', 'stats::weighted.mean(x, w = wts, na.rm = TRUE)')
if (fill.sn) {
summ.names[[i]][2] <- paste0(summ.names[[i]][2], ' (Weighted)')
}
}
} else if ((is.na(group) | group.long == TRUE) & length(col.breaks) == 1) {
summ[[i]] <- c('notNA(x)','mean(x)','sd(x)','min(x)','pctile(x)[25]','pctile(x)[75]','max(x)')
if (fill.sn) {
summ.names[[i]] <- c('N','Mean','Std. Dev.','Min','Pctl. 25','Pctl. 75','Max')
}
# Add median if desired
if (add.median) {
summ[[i]] <- c('notNA(x)','mean(x)','sd(x)','min(x)','pctile(x)[25]','median(x)','pctile(x)[75]','max(x)')
if (fill.sn) {
summ.names[[i]] <- c('N','Mean','Std. Dev.','Min','Pctl. 25','Pctl. 50', 'Pctl. 75','Max')
}
}
# If there are weights
if (!is.null(wts)) {
summ[[i]][summ[[i]] == 'mean(x)'] <- 'stats::weighted.mean(x, w = wts, na.rm = TRUE)'
summ[[i]][summ[[i]] == 'sd(x)'] <- 'weighted.sd(x, w = wts)'
if (fill.sn) {
summ.names[[i]][summ.names[[i]] == 'Mean'] <- 'Wt. Mean'
summ.names[[i]][summ.names[[i]] == 'Std. Dev.'] <- 'Wt. SD'
}
}
} else if ((is.na(group) | group.long == TRUE) & length(col.breaks) > 1) {
summ[[i]] <- c('notNA(x)','mean(x)','sd(x)')
if (fill.sn) {
summ.names[[i]] <- c('N','Mean','Std. Dev.')
}
if (add.median) {
summ[[i]] <- c('notNA(x)','mean(x)','sd(x)', 'median(x)')
if (fill.sn) {
summ.names[[i]] <- c('N','Mean','Std. Dev.', 'Median')
}
}
# If there are weights
if (!is.null(wts)) {
summ[[i]][summ[[i]] == 'mean(x)'] <- 'stats::weighted.mean(x, w = wts, na.rm = TRUE)'
summ[[i]][summ[[i]] == 'sd(x)'] <- 'weighted.sd(x, w = wts)'
if (fill.sn) {
summ.names[[i]][summ.names[[i]] == 'Mean'] <- 'Wt. Mean'
summ.names[[i]][summ.names[[i]] == 'Std. Dev.'] <- 'Wt. SD'
}
}
} else {
summ[[i]] <- c('notNA(x)','mean(x)','sd(x)')
if (fill.sn) {
summ.names[[i]] <- c('N','Mean','SD')
}
if (add.median) {
summ[[i]] <- c('notNA(x)','mean(x)','sd(x)', 'median(x)')
if (fill.sn) {
summ.names[[i]] <- c('N','Mean','SD', 'Median')
}
}
# If there are weights
if (!is.null(wts)) {
summ[[i]][summ[[i]] == 'mean(x)'] <- 'stats::weighted.mean(x, w = wts, na.rm = TRUE)'
summ[[i]][summ[[i]] == 'sd(x)'] <- 'weighted.sd(x, w = wts)'
if (fill.sn) {
summ.names[[i]][summ.names[[i]] == 'Mean'] <- 'Wt. Mean'
summ.names[[i]][summ.names[[i]] == 'SD'] <- 'Wt. SD'
}
}
}
}
} else if (!is.list(summ)) {
#If summ was entered as a vector, turn it into a list
#And copy it if there are multiple columns
summ <- lapply(1:length(col.vars), function(x) summ)
}
#Figure if digits started as a list or vector. If it did,
#ignore the auto-zero-digits for integers
digits.was.list <- is.list(digits)
if (is.vector(digits)) {
if (length(digits) > 1) {
digits.was.list <- TRUE
}
}
#Now fill in values for digits
if (identical(digits,NA)) {
digits <- list()
for (i in 1:length(col.breaks)) {
digits[[i]] <- rep(3,length(summ[[i]]))
digits[[i]][1] <- 0
}
} else if (is.numeric(digits)) {
if (length(digits) == 1) {
digopt <- digits
digits <- list()
for (i in 1:length(col.breaks)) {
digits[[i]] <- rep(digopt,length(summ[[i]]))
}
} else {
digits <- lapply(1:length(col.breaks), function(x) digits)
}
}
#If we have fixed.digits and digits weren't
#explicitly set by list,
#set digits to 0 for integers
if (fixed.digits & !digits.was.list) {
for (i in 1:length(summ)) {
for (j in 1:length(summ[[i]])) {
# Attempt to calc each variable for this function
calcs <- sapply(vars, function(x) parsefcn_summ(data[[x]],summ[[i]][j]))
calcs <- calcs[!is.na(calcs)]
if (is.round(calcs) | summ[[i]][j] == 'notNA(x)') {
digits[[i]][j] <- 0
}
}
}
}
#And fill in summ.names the rest of the way
#If a vector was specified for summ.names, turn it into a list
if (!fill.sn & !is.list(summ.names)) {
summ.names <- lapply(1:length(col.vars), function(x) summ.names)
}
#If summ.names is still missing, create it from summ
if (identical(summ.names,NA)) {
summ.names <- list()
for (i in 1:length(col.vars)) {
functionsused <- summ[[i]]
functionsused <- sub('\\(x\\)','',functionsused)
firstletters <- toupper(substring(functionsused,1,1))
summ.names[[i]] <- paste0(firstletters,substring(functionsused,2))
}
}
#group.test defaults
#send the options to .opts, and make group.test be logical
if (identical(group.test,TRUE)) {
if (out %in% c('latex','latexpage') |
(isTRUE(getOption('knitr.in.progress')) & is.na(out) & isTRUE(knitr::is_latex_output()))) {
group.test.opts <- list(format = '{name}$={stat}^{{stars}}$')
} else if (out %in% c('return','kable','csv') |
(isTRUE(getOption('knitr.in.progress')) & is.na(out) & isFALSE(knitr::is_latex_output()) & isFALSE(knitr::is_html_output()))) {
group.test.opts <- list(format = '{name}={stat}{stars}')
} else {
group.test.opts <- list(format = '{name}={stat}<sup>{stars}</sup>')
}
} else if (is.list(group.test)) {
group.test.opts <- group.test
group.test <- TRUE
}
starnote <- NA_character_
####### APPLY LABELS OPTION
vartitles <- vars
grouptitle <- group
####### APPLICATION OF LABELS OPTION
#Pull from label attribute if present
if (identical(labels,TRUE)) {
labs <- sapply(vars, function(x) attr(data[[x]],'label'))
has.no.labs <- unlist(sapply(labs, is.null))
vartitles[!has.no.labs] <- unlist(labs[!has.no.labs])
if (!is.na(group)) {
if (!is.null(attr(data[[group]],'label'))) {
grouptitle <- attr(data[[group]],'label')
}
}
} else if (!identical(labels,NA)) {
if (is.vector(labels)) {
#Make sure it's the right length
if (length(labels) == length(vars)) {
vartitles[!is.na(labels)] <- labels[!is.na(labels)]
} else {
stop('label vector must have as many elements as there are variables as will be in the sumtable. Use NA elements to fill in, or see help(sumtable) for other label formats that do not require every variable to have a label.')
}
#Check for multi-row two-column format
} else if(dim(labels)[1] > 1 & dim(labels)[2] == 2) {
# What we have now
temp.df <- data.frame(vars = vars, stringsAsFactors = FALSE)
#Put labels in mergeable format
labs <- as.data.frame(labels, stringsAsFactors = FALSE)
names(labs) <- c('vars','vartitles')
#They gotta be strings
labs$vars <- as.character(labs$vars)
labs$vartitles <- as.character(labs$vartitles)
#Hold original order
temp.df$order <- 1:nrow(temp.df)
#Bring in variable labels by name, allow NA labels with all.x=TRUE
temp.df <- merge(temp.df,labs,sort=FALSE,all.x=TRUE)
temp.df <- temp.df[order(temp.df$order),]
# Fill in the NAs with the column titles
temp.df$vartitles[is.na(temp.df$vartitles)] <- temp.df$vars[is.na(temp.df$vartitles)]
vartitles <- temp.df$vartitles
if (!is.na(group)) {
if (sum(labels[[1]] == group) > 0) {
grouptitle <- labels[labels[[1]] == group,2]
}
}
#Check if it's in the one-row variable-name format
} else if (dim(labels)[1]==1 & !is.null(colnames(labels))) {
#Put into two-column format
labs <- data.frame(vars=colnames(labels),vartitles=as.character(t(labels[1,])),stringsAsFactors = FALSE)
# What we have now
temp.df <- data.frame(vars = vars, stringsAsFactors = FALSE)
#Hold original order
temp.df$order <- 1:nrow(temp.df)
#Bring in variable labels by name, allow NA labels with all.x=TRUE
temp.df <- merge(temp.df,labs,sort=FALSE,all.x=TRUE)
temp.df <- temp.df[order(temp.df$order),]
# Fill in the NAs with the column titles
temp.df$vartitles[is.na(temp.df$vartitles)] <- temp.df$vars[is.na(temp.df$vartitles)]
vartitles <- temp.df$vartitles
if (!is.na(group)) {
if (!is.null(labels[[group]])) {
grouptitle <- labels[[group]][1]
}
}
} else{
stop('Unrecognized label format. See help(vtable).')
}
}
# Create one for each column
st <- list()
i = 1
#Initialize with no rows
st[[i]] <- utils::read.csv(text = paste(c('Variable',summ.names[[i]]),
collapse =','),
check.names = FALSE)
x <- col.vars[[i]]
x
var <- vars[x]
st <- st[[i]]
title = vartitles[x]
summ = summ[[i]]
cla = var.classes[x]
digits = digits[[i]]
wts = NULL
save.image("C:/Users/nhuntington-klein/OneDrive - Seattle University/General Work/vtable/before_summary_row.RData")
numcols <- length(summ)
cla
x
vars
var = vars[1]
title = vartitles[1]
cla = var.classes[1]
cla
save.image("C:/Users/nhuntington-klein/OneDrive - Seattle University/General Work/vtable/before_summary_row.RData")
cla
#Get data
va <- data[[var]]
va
digits
#Run each of the functions on the variable and get results
results <- sapply(summ, function(y) parsefcn_summ(va,y, wts = wts[!is.na(va)]))
results
sapply(1:length(results), function(y) format(results[y],digits=digits[y],nsmall = max(digits[y],1),scientific = FALSE))
sapply(1:length(results), function(y) format(results[y],digits=digits[y],nsmall = max(digits[y],1, nsmall = 0),scientific = FALSE))
sapply(1:length(results), function(y) format(results[y],digits=digits[y],nsmall = max(digits[y],0),scientific = FALSE))
sapply(1:length(results), function(y) format(results[y],digits=max(digits[y],1),nsmall = digits[y],scientific = FALSE))
library(vtable)
setwd("C:/Users/nhuntington-klein/OneDrive - Seattle University/Teaching/Data Communication Spring 21/Data Translation Challenge")
library(tigris)
library(tidyverse)
library(ggplot2)
library(lubridate)
mapdata <- block_groups('WA','033', cb = TRUE)
ov <- readRDS('king_originvisits.Rdata')
load('king_originvisits.Rdata')
load("C:/Users/nhuntington-klein/OneDrive - Seattle University/Teaching/Data Communication Spring 21/Data Translation Challenge/king_originvisits.Rdata")
ov <- readRDS("C:/Users/nhuntington-klein/OneDrive - Seattle University/Teaching/Data Communication Spring 21/Data Translation Challenge/king_originvisits.Rdata")
library(tigris)
library(tidyverse)
library(ggplot2)
library(lubridate)
mapdata <- block_groups('WA','033', cb = TRUE)
ov <- readRDS('king_originvisits.Rdata')
# THE PART FOR YOU TO CHANGE BASED ON YOUR ANALYSIS
# Your goal: summarize your data to the GEOID level, so that you have one number per GEOID that you want to graph
ov2 <- ov %>%
# This particular example counts the number of visits to NAICS code 441120 or code 441320 in each area.
# That's a single number (sum of visits to a set of codes) per area
filter(brands %in% c('Toyota'))
# Bring together our one-number-per-GEOID and the map data
map_and_data <- geo_join(mapdata, ov, by = 'GEOID', how = 'left')
# If I want to use neighborhoods, bring that information in
neighborhoods <- readRDS('neighborhood_names.Rdata')
load("C:/Users/nhuntington-klein/OneDrive - Seattle University/Teaching/Data Communication Spring 21/Data Translation Challenge/neighborhood_names.Rdata")
# Merge in
ov3 <- ov2 %>%
# the right join limits us automatically to GEOIDs that have neighborhood names
right_join(neighborhoods) %>%
# DON'T group_by and summarize to neighborhood - we are just labeling the GEOIDs with neighborhood,
# we don't have the map data to map each neighborhood as its own polygon
# If we want to do something by-neighborhood, instead group_by neighborhood and use mutate instead of summarize
group_by(NEIGHBORHOOD_DISTRICT_NAME) %>%
mutate(neighb_visits = sum(visits, na.rm = TRUE))
# Merge in
ov3 <- ov2 %>%
# the right join limits us automatically to GEOIDs that have neighborhood names
right_join(neighborhood_names) %>%
# DON'T group_by and summarize to neighborhood - we are just labeling the GEOIDs with neighborhood,
# we don't have the map data to map each neighborhood as its own polygon
# If we want to do something by-neighborhood, instead group_by neighborhood and use mutate instead of summarize
group_by(NEIGHBORHOOD_DISTRICT_NAME) %>%
mutate(neighb_visits = sum(visits, na.rm = TRUE))
# The "inner" join only takes the parts of the map that are in ov3 (i.e. have a neighborhood name)
map_w_neighborhoods <- geo_join(mapdata, ov3, by = 'GEOID', how = 'inner')
# And graph as a heatmap
# I'm not sure I like this alpha-shading for the visits, but this is just one way you could do it
ggplot(map_w_neighborhoods) +
geom_sf(aes(fill = NEIGHBORHOOD_DISTRICT_NAME)) +
labs(title = "Maps of King County and by Their Neighborhood") +
theme(plot.title = element_text(hjust = 0, size = 19.5))
# Use the variant that's the same for each neighborhood
ggplot(map_w_neighborhoods) +
geom_sf(aes(fill = neighb_visits)) +
devtools::check()
setwd("C:/Users/nhuntington-klein/OneDrive - Seattle University/General Work/vtable/vtable")
roxygen2::roxygenise()
devtools::check()
devtools::check(args='--as-cran')

st(mtcars, col.breaks = 6)
data(storms, package='dplyr')
vtable::st(storms)
vtable::(mtcars, group = 'am', group.long = TRUE, out = 'latexpage', file = '../testtable.tex')
vtable::st(mtcars, group = 'am', group.long = TRUE, out = 'latexpage', file = '../testtable.tex')
roxygen2::roxygenize()
library(vtable)
library(vtable)
library(kableExtra)
help(pipe)
vt(iris, lush = TRUE, out = 'kable')
help(gsub)
vt(iris, lush = TRUE, out = 'kable')
library(vtable)
vt(iris, lush = TRUE, out = 'return')
library(vtable)
data(efc, package = 'sjlabelled')
efc$e16sex
# Now shoot - how was gender coded?
labeltable(efc$e16sex, out = 'kable')
setwd("C:/Users/nhuntington-klein/Dropbox (CSU Fullerton)/General Work/vtable/vtable")
out = 'kable'
file = NA
desc = NA
#Just in case, noting that if ...s are labeled,
#but a package that supports the class isn't loaded it messes things up
comp.vars <- data.frame(lapply(list(...),function(x) sjlabelled::unlabel(x)))
var <- efc$e16sex
if (!is.na(desc) & !is.character(desc)) {
stop('desc must be a character.')
}
if (!identical(out,NA) & !(out %in% c('viewer', 'browser','return','htmlreturn','kable','latex','latexpage'))) {
stop('out must be viewer, browser, return, htmlreturn, kable, latex, or latexpage')
}
#Get actual name of variable
var.name <- deparse(substitute(var))
var.name <- utils::tail(strsplit(var.name,'\\$')[[1]],1)
#labels version
if (ncol(comp.vars)==0) {
#Put in a data frame for working with
lt <- data.frame(var)
#Only need one of each value
lt <- subset(lt,!duplicated(lt))
#Why aren't labels preserved with subset anyway??
lt$var <- sjlabelled::set_labels(lt$var,labels=attr(var,'labels'))
#Create the column with labels
lt$labs <- sjlabelled::as_label(lt$var)
lt <- lt[order(lt$var),]
lt$var <- as.character(lt$var)
#And a row with the unused labels
#extract all labels
labs <- attr(var,'labels')
#find which ones aren't present
labs <- labs[!(names(labs) %in% lt$labs)]
if (length(labs) > 0) {
#Get into the same format as above
lt2 <- data.frame(labs)
names(lt2)[1] <- 'var'
lt2$var <- paste(lt2$var,' [NOT IN DATA]',sep='')
lt2$labs <- row.names(lt2)
lt <- rbind(lt,lt2)
}
names(lt) <- c(var.name,'Label')
}
#Put in a data frame for working with
lt <- data.frame(var)
#Only need one of each value
lt <- subset(lt,!duplicated(lt))
#Why aren't labels preserved with subset anyway??
lt$var <- sjlabelled::set_labels(lt$var,labels=attr(var,'labels'))
#Create the column with labels
lt$labs <- sjlabelled::as_label(lt$var)
lt <- lt[order(lt$var),]
lt$var <- as.character(lt$var)
#And a row with the unused labels
#extract all labels
labs <- attr(var,'labels')
#find which ones aren't present
labs <- labs[!(names(labs) %in% lt$labs)]
if (length(labs) > 0) {
#Get into the same format as above
lt2 <- data.frame(labs)
names(lt2)[1] <- 'var'
lt2$var <- paste(lt2$var,' [NOT IN DATA]',sep='')
lt2$labs <- row.names(lt2)
lt <- rbind(lt,lt2)
}
names(lt) <- c(var.name,'Label')
lt
library(vtable)
# Now shoot - how was gender coded?
labeltable(efc$e16sex, out = 'kable')
labeltable(efc$e16sex, out = 'return')
help("data.frame")
help(kable, package='knitr')
library(vtable)
labeltable(efc$e16sex, out = 'kable')
# Now shoot - how was gender coded?
labeltable(efc$e16sex, out = 'kable')
labeltable(efc$e15relat,efc$e16sex,efc$e42dep, out = 'kable')
var <- efc$e15relat
comp.vars <- data.frame(lapply(list(efc$e16sex,efc$e42dep),function(x) sjlabelled::unlabel(x)))
names(comp.vars) <- sapply(as.list(substitute(list(...)))[-1L], function(x)
utils::tail(as.character(x),n=1))
if (ncol(comp.vars)==0 & is.null(unlist(sjlabelled::get_labels(var)))) {
stop('Either var must have labels, or variables must be specified in ...')
}
if (!is.na(desc) & !is.character(desc)) {
stop('desc must be a character.')
}
if (!identical(out,NA) & !(out %in% c('viewer', 'browser','return','htmlreturn','kable','latex','latexpage'))) {
stop('out must be viewer, browser, return, htmlreturn, kable, latex, or latexpage')
}
#Get actual name of variable
var.name <- deparse(substitute(var))
var.name <- utils::tail(strsplit(var.name,'\\$')[[1]],1)
#labels version
if (ncol(comp.vars)==0) {
#Put in a data frame for working with
lt <- data.frame(var)
#Drop missings
lt <- na.omit(lt)
#Only need one of each value
lt <- subset(lt,!duplicated(lt))
#Why aren't labels preserved with subset anyway??
lt$var <- sjlabelled::set_labels(lt$var,labels=attr(var,'labels'))
#Create the column with labels
lt$labs <- sjlabelled::as_label(lt$var)
lt <- lt[order(lt$var),]
lt$var <- as.character(lt$var)
#And a row with the unused labels
#extract all labels
labs <- attr(var,'labels')
#find which ones aren't present
labs <- labs[!(names(labs) %in% lt$labs)]
if (length(labs) > 0) {
#Get into the same format as above
lt2 <- data.frame(labs)
names(lt2)[1] <- 'var'
lt2$var <- paste(lt2$var,' [NOT IN DATA]',sep='')
lt2$labs <- row.names(lt2)
lt <- rbind(lt,lt2)
}
names(lt) <- c(var.name,'Label')
}
#Put in a data frame for working with
prelt <- data.frame(var,comp.vars)
#Only need one of each value
prelt <- subset(prelt,!duplicated(prelt))
lt <- data.frame(
var=unique(prelt$var),
lapply(names(prelt)[-1],function(y) sapply(unique(prelt$var),function(x)
paste0(unique(subset(prelt,prelt$var==x)[[y]]),collapse=', '))))
lt <- lt[order(lt$var),]
names(lt) <- c(var.name,names(prelt)[-1])
lt
as.character(NA)
as.character(c(1,NA))
library(vtable)
labeltable(efc$e15relat,efc$e16sex,efc$e42dep, out = 'kable')
labeltable(efc$e15relat,efc$e16sex,efc$e42dep, out = 'return')
min_df <- haven::read_dta("../tmp_dta.dta")
min_df
vtable::st(min_df)
vtable::st(data.frame(min_df))
data.frame(min_df)
vtable::st(mutate(min_df, gluc = as.double(gluc)))
vtable::st(dplyr::mutate(min_df, gluc = as.double(gluc)))
vtable::st(data.frame(dplyr::mutate(min_df, gluc = as.double(gluc))))
vt(min_df)
class(data.frame(min_df)$gluc)
st(efc)
class(min_df[,'gluc'])
class(min_df[['gluc']])
sjlabelled::get_labels(min_df[,'gluc'])
is.null(sjlabelled::get_labels(min_df[,'gluc']))
is.null(sjlabelled::get_labels(min_df[['gluc']]))
sjlabelled::get_labels(min_df[['gluc']]
)
#DON'T include variables with unlabelled values
unlabvals <-  length(sjlabelled::get_labels(data[,c])) == length(sjlabelled::get_labels(data[,c], non.labelled = TRUE))
data <- min_df
c <- 'gluc'
#DON'T include variables with unlabelled values
unlabvals <-  length(sjlabelled::get_labels(data[[c]])) == length(sjlabelled::get_labels(data[[c]], non.labelled = TRUE))
unlabvals
length(sjlabelled::get_labels(data[[c]]))
length(sjlabelled::get_labels(data[[c]], non.labelled = TRUE))
st(min_df)
st(mtcars)
st(min_df %>% dplyr::mutate(gluc = 2)
)
st(min_df
)
class(min_df$gluc)
class(as.numeric(min_df$gluc))
sjlabelled::drop_labels(min_df$gluc)
st(min_df)
data <- min_df
vars=NA;out=NA;file=NA;
summ=NA;
summ.names=NA;
group=NA;group.long=FALSE;group.test=FALSE;
col.breaks=NA;
digits=NA;fixed.digits=FALSE;factor.percent=TRUE;
factor.counts=TRUE;factor.numeric=FALSE;
logical.numeric=FALSE;labels=NA;title='Summary Statistics';
note = NA; anchor=NA;col.width=NA;col.align=NA;
align=NA;opts=list()
#Bring in opts
list2env(opts,envir=environment())
#######CHECK INPUTS
if (is.null(colnames(data))) {
stop('Requires data with variable names or column names.')
}
if (!is.na(file) & !is.character(file)) {
stop('Incorrect file name.')
}
if (!identical(vars,NA) & !is.character(vars)) {
stop('vars must be a character vector.')
}
if (!identical(note,NA) & !is.character(note)) {
stop('note must be a character vector.')
}
if (!identical(anchor,NA) & !is.character(anchor)) {
stop('anchor must be a character variable.')
}
if (min(is.na(col.width)) == 0 & (!is.vector(col.width) | !is.numeric(col.width) | sum(is.na(col.width)) > 0)) {
stop('col.width must be a numeric vector with no missing values.')
}
if (min(is.na(col.width)) == 0 & (max(col.width) > 100 | min(col.width) < 0)) {
stop('Elements of col.width must be between 0 and 100.')
}
if (!is.list(summ)) {
if (min(is.na(summ)) == 0 & (!is.vector(summ) | !is.character(summ) | sum(is.na(summ)) > 0)) {
stop('summ must be a character vector with no missing values.')
}
}
if (!is.list(summ.names)) {
if (min(is.na(summ.names)) == 0 & (!is.vector(summ.names) | !is.character(summ.names) | sum(is.na(summ.names)) > 0)) {
stop('summ.names must be a character vector with no missing values.')
}
}
if (!is.na(group) & !is.character(group)) {
stop('group must be a character variable.')
if (!(group %in% colnames(data))) {
stop('group must be a column name in the data.')
}
}
if (!is.logical(group.test) & !is.list(group.test)) {
stop('group.test must be TRUE, FALSE, or a named list of options to pass to independence.test\'s opts argument.')
}
if (!identical(group.test,FALSE) & is.na(group)) {
warning('group.test will be ignored, since no group is set.')
}
if (!identical(group.test,FALSE) & group.long == TRUE) {
warning('group.test is incompatible with group.long == TRUE and will be ignored.')
}
if (!is.logical(factor.numeric) | !is.logical(logical.numeric)) {
stop("factor.numeric and logical.numeric must each be TRUE or FALSE")
}
if (is.logical(group.long)) {
group.long.align <- 'c'
} else if (is.character(group.long)) {
if (group.long %in% c('l','r','c')) {
group.long.align <- group.long
group.long <- TRUE
} else {
stop('group.long must be TRUE, FALSE, or a character l, c, or r.')
}
} else {
stop('group.long must be TRUE, FALSE, or a character l, c, or r.')
}
if (!is.logical(fixed.digits)) {
stop('fixed.digits must be TRUE or FALSE.')
}
if (!is.numeric(col.breaks) & !identical(col.breaks,NA)) {
stop('col.breaks must be numeric.')
}
if (!is.na(group) & !identical(col.breaks,NA) & group.long == FALSE) {
stop('group cannot be combined with col.breaks unless group.long = TRUE.')
}
if (!is.numeric(digits) & !is.list(digits) & !identical(digits,NA)) {
stop('digits must be numeric.')
}
if (!is.logical(factor.percent) | !is.logical(factor.counts)) {
stop('factor.percent and factor.counts must each be TRUE or FALSE.')
}
if (!is.character(title)) {
stop('title must be a character variable.')
}
#One-column matrices run into some problems later on
if (is.matrix(data) & dim(data)[2] == 1) {
data <- as.data.frame(data)
}
#######CONVERT ALL LABELED NUMERIC VARIABLES AND LOW-NUNIQ CHARACTERS TO FACTORS
#Get classes of each variable, only caring about numeric/character/factor/logical/other
var.classes <- sapply(data, function(x) ifelse(
is.factor(x), 'factor', ifelse(
is.logical(x), 'logical', ifelse(
is.character(x), 'character', ifelse(
is.numeric(x), 'numeric', 'other')))))
labwarning <- FALSE
for (c in 1:ncol(data)) {
#Factorize each character variable with six or fewer unique values
if (var.classes[c] == 'character') {
if (vtable::nuniq(data[[c]]) <= 6) {
data[[c]] <- as.factor(data[[c]])
}
} else if (var.classes[c] == 'logical') {
#Turn logicals to numerics if logical.numeric = FALSE
if (logical.numeric) {
data[[c]] <- as.numeric(data[[c]])
} else {
# Otherwise make them factors
data[[c]] <- factor(data[[c]], labels = c("No","Yes"))
}
} else if (var.classes[c] == 'numeric') {
# If a numeric variable has value labels, turn this into a factor
if ('labelled' %in% class(data[[c]]) | ('haven_labelled' %in% class(data[[c]]) | !is.null(unlist(sjlabelled::get_labels(data[[c]]))))) {
#DON'T include variables with unlabelled values
unlabvals <-  length(sjlabelled::get_labels(data[[c]])) == length(sjlabelled::get_labels(data[[c]], non.labelled = TRUE))
if (!unlabvals) {
data[[c]] <- sjlabelled::drop_labels(data[[c]])
labwarning <- TRUE
} else {
#Turn into the appropriately-titled factor
suppressWarnings(data[[c]] <- sjlabelled::as_label(data[,c,drop=FALSE]))
}
}
}
}
if (labwarning) {
warning('Some labelled variables have unlabeled values. Treating these as numeric variables and ignoring labels.')
}
#Re-get classes of each variable, only caring about numeric/character/factor/logical
var.classes <- sapply(data, function(x) ifelse(
is.factor(x), 'factor', ifelse(
is.logical(x), 'logical', ifelse(
is.character(x), 'character', ifelse(
is.numeric(x), 'numeric', 'other')))))
data
class(data$gluc)
help(drop_labels, package= 'sjlabelled')
class(sjlabelled::drop_labels(data$gluc))
class(sjlabelled::zap_labels(data$gluc))
class(sjlabelled::remove_labels(data$gluc))
help(remove_labels, package ='sjlabelled')
class(sjlabelled::set_labels(data$gluc,labels=''))
class(as.numeric(data$gluc))
st(min_df)
attr(data.frame(min_df)$gluc,'labels')
sjlabelled::get_labels(data.frame(min_df)$gluc)
is.numeric(min_df$gluc)
library(vtable)
st(mtcars, note = 'hey')
vt(mtcars, note = 'hey')
identical(NA,NA_character_)
library(vtable)
st(mtcars, note = 'hey')
st(mtcars, note = 'hey',group='am',group.test=TRUE)
library(vtable)
st(mtcars, note = 'hey',group='am',group.test=TRUE)
help(package='rmarkdown')
library(vtable)
library(vtable)
vt(mtcars,note='whoa nelly what a note this is',out='kable')
vt(mtcars,note='whoa nelly what a note this is',out='latex',data.title='foo')
vt(mtcars,note='whoa nelly what a note this is',out='return')
vt(mtcars,note='whoa nelly what a note this is',out='htmlreturn')
vt(mtcars,note='whoa nelly what a note this is',out='latex')
vt(mtcars,note='whoa nelly what a note this is',out='html')
vt(mtcars,note='whoa nelly what a note this is',out='htmlreturn')
vt(mtcars,data.title='whoa nelly what a note this is',out='htmlreturn')
vt(mtcars,data.title='whoa nelly what a note this is',out='return')
vt(mtcars,data.title='whoa nelly what a note this is',out='kable')
vt(mtcars,data.title='whoa nelly what a note this is',out='latex')
data("LifeCycleSavings")
help("LifeCycleSavings")
vtable(LifeCycleSavings,data.title='Intercountry Life-Cycle Savings Data',
desc='Data on the savings ratio 1960–1970',
note='Data from Belsley, Kuh, and Welsch (1980)')
st(LifeCycleSavings)
library(vtable)
st(LifeCycleSavings)
vt(LifeCycleSavings)
st(LifeCycleSavings)
stargazer::stargazer(LifeCycleSavings,summary=FALSE)
stargazer::stargazer(LifeCycleSavings,summary=FALSE,type='text')
stargazer::stargazer(LifeCycleSavings,summary=FALSE,type='html')
stargazer::stargazer(LifeCycleSavings,type='text')
stargazer::stargazer(LifeCycleSavings,type='html')
st(LifeCycleSavings,col.align = 'center')
st(LifeCycleSavings,col.align = c('left',rep('center',7)))
st(LifeCycleSavings,group=sample(c(T,F),50,replace=T))
LifeCycleSavings$foo <- sample(c(T,F),50,replace=T)
st(LifeCycleSavings,group='foo')
library(vtable)
st(LifeCycleSavings,group='foo')
st(LifeCycleSavings,group='foo',out='kable')
st(LifeCycleSavings,group='foo',out='return')
vt(LifeCycleSavings)
vt(LifeCycleSavings,col.align='right')
vt(LifeCycleSavings,col.align=c('left','right','center'))
vt(LifeCycleSavings,col.widths = c(10,40,40))
vt(LifeCycleSavings,col.width = c(10,40,40))
vt(LifeCycleSavings,col.width = c(10,40,40),out='latex')
vtable(efc,align = 'rrr', out = 'latex')
data(efc, package='sjlabelled')
vtable(efc,align = 'rrr', out = 'latex')
vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)'))
vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)','median(x)'))
vtable(efc,lush=TRUE)
which(names(efc)[names(efc) == 'c12hour'])
which(names(efc) == 'c12hour')
which(names(efc) == 'c12hourd')
vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)','median(x)'),out='latex')
vt <- vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)','median(x)'),out='return')
vt
vt$Summary[1:2]
vt$Summary <- gsub(';','\\\\',vt$Summary)
vt$Summary <- paste0('\\begin{tabular}[t]{@{}c@{}}',vt$Summary,'\\end{tabular]')
vt$Summary[1:2]
library(vtable)
vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)','median(x)'),out='latex')
library(vtable)
vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)','median(x)'),out='latex')
vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)','median(x)'),out='latexpage',file='../texttable.tex')
vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)','median(x)'))
library(vtable)
vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)','median(x)'),out='latexpage',file='../texttable.tex')
library(vtbale)
library(vtable)
vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)','median(x)'),out='latexpage',file='../testtable.tex')
library(vtable)
vtable(efc,summ = c('countNA(x)','notNA(x)','propNA(x)','mean(x)','median(x)'),out='latexpage',file='../testtable.tex')
st(efc)
st(efc,summ='countNA(x)')
efc$c12hour[1] <- NA
st(efc,summ='countNA(x)')
st(efc)
st(efc,summ='propNA(x)')
y = 'propNA(x)'
sapply(c('anyNA','propNA','countNA'),function(z) grepl(z,y))
any(sapply(c('anyNA','propNA','countNA'),function(z) grepl(z,y)))
library(vtable)
st(efc,summ='propNA(x)')
sum(is.na(efc$c12hour))
library(vtable)
st(efc,summ='propNA(x)')
st(efc,summ=c('propNA(x)','countNA(x)','mean(x)')
)
efc$barthtot <- NA
st(efc,summ=c('propNA(x)','countNA(x)','mean(x)'))
efc$barthtot <- NA_integer_
st(efc,summ=c('propNA(x)','countNA(x)','mean(x)'))
data("LifeCycleSavings")
help("LifeCycleSavings")
data("LifeCycleSavings")
vtable::dftoHTML(LifeCycleSavings)
vtable::dftoHTML(LifeCycleSavings,row.names = TRUE)
vtable::dftoLaTeX(LifeCycleSavings,row.names = TRUE)
dftoLaTeX(LifeCycleSavings,row.names=TRUE,align='p{.25\textwidth}ccccc',frag=FALSE,file='../testtable.tex')
vtable::dftoLaTeX(LifeCycleSavings,row.names=TRUE,align='p{.25\textwidth}ccccc',frag=FALSE,file='../testtable.tex')
vtable::dftoLaTeX(LifeCycleSavings,row.names=TRUE,align='p{.25\\textwidth}ccccc',frag=FALSE,file='../testtable.tex')
roxygen2::roxygenize()
help(dftoLaTeX)
data(efc)
vtable(efc,align = 'p{.3\\textwidth}cc', out = 'latex')
library(sjlabelled)
data(efc)
vtable(efc,align = 'p{.3\\textwidth}cc', out = 'latex')
update.packages('pkgdown')
plot(pctile(rnorm(1000)))
d <- rnorm(1000)
pc <- pctile(d)
#25th, 50th, 75th percentile
pc[c(25,50,75)]
plot(pc)
data(iris)
independence.test(iris$Species,
iris$Sepal.Length,
star.cutoffs = c(.05,.01,.001))
independence.test(iris$Species,iris$Sepal.Width)
independence.test(iris$Species,iris$Sepal.Width,digits=4)
independence.test(iris$Species,
iris$Sepal.Width,
digits=1)
independence.test(iris$Species,
iris$Sepal.Width,
digits=4,
fixed.digits = TRUE)
independence.test(iris$Species,
iris$Sepal.Width,
digits=10,
fixed.digits = TRUE)
independence.test(iris$Species,
iris$Sepal.Width,
format = '{pval}{stars}')
independence.test(iris$Species,
iris$Sepal.Width,
format = '{name}: {pval}{stars}')
independence.test(iris$Species,
iris$Sepal.Width,
format = 'p > {name}: {pval}{stars}')
independence.test(iris$Species,
iris$Sepal.Width,
format = 'Pr(>{name}): {pval}{stars}')
roxygen2::roxygenise()
browseVignettes()
browseVignettes(package='vtable')
library(vtable)
